import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:souq/src/models/Store.dart';
import 'package:souq/src/models/StoryItem.dart';

class StoreRepository {
  final CollectionReference collection =
  FirebaseFirestore.instance.collection('Store');

  Stream<QuerySnapshot> getStores() {
    return collection.snapshots();
  }

  Future<DocumentReference> addStore(Store store) {
    return collection.add(store.toJson());
  }

  Future<void> addStoreFuture() async {
    List<StoryContent> list = [];
    StoreRepository repository = StoreRepository();
    list.add(new StoryContent("", 1));
    Store newStore = new Store( "ماكس", "zara", 1, true,list);
    await FirebaseFirestore.instance.collection('Store').add(repository.storeToJson(newStore)).then((value) => print(value));
  }

  Map<String, dynamic> storeToJson(Store instance) =>
      <String, dynamic>{
        'NameAr': instance.nameAr,
        'NameEn': instance.nameEn,
        'Category': instance.category,
        'isApprovedByAdmin': instance.isApprovedByAdmin,
        'Stories' : instance.stories.map((i) => i.toMap()).toList(),
      };
}